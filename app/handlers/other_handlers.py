from aiogram import Router, F
from aiogram.enums import ParseMode
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import StatesGroup, State

from app.bot import bot

from app.utils.disk import YandexDisk
from app.keyboards.inline_keyboards import kb_sources, kb_cancel_delete, kb_add_source, kb_list_categories, kb_add_ban_categories, kb_add_categories

from app.config import DISK_ID, DISK_SECRET, DISK_TOKEN, FILE_SOURCE, FILE_BAN_CATEGORIES, ADMIN_ID

router = Router()

global msg_sources_id, msg_add_title_id, msg_add_link_id, msg_add_categories_id
msg_sources_id = None
msg_add_title_id = None
msg_add_link_id = None
msg_add_categories_id = None

class DeleteSource(StatesGroup):
    source = State()

class AddSource(StatesGroup):
    source_title = State()
    source_link = State()

class AddBanCategories(StatesGroup):
    list_ban_categories = State()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —è–Ω–¥–µ–∫—Å –¥–∏—Å–∫—É
disk = YandexDisk(DISK_ID, DISK_SECRET, DISK_TOKEN)

@router.callback_query(F.data == 'sources')
async def sources(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    global msg_sources_id

    user_id = callback.from_user.id

    if user_id == ADMIN_ID:
        msg_load = await callback.message.answer(text='üîÉ –ó–∞–≥—Ä—É–∂–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...')
        await callback.message.delete() if msg_load else None

        await disk.init_client()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        list_sources = await disk.get_sources(FILE_SOURCE)

        message_text = 'üóíÔ∏è –ò—Å—Ç–æ—á–Ω–∏–∫–∏:\n\n'
        for i, source in enumerate(list_sources):
            message_text += f'{i+1}. <a href="{source[1]}">{source[0]}</a>\n'
        message_text += '\nüóëÔ∏è –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–∞ üëá'

        msg_sources = await callback.message.answer(text=message_text, reply_markup=await kb_sources(), parse_mode=ParseMode.HTML)
        msg_sources_id = msg_sources.message_id
        await msg_load.delete() if msg_sources else None

@router.callback_query(StateFilter(None), F.data == 'delete_source')
async def delete_source_handler(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup(reply_markup=await kb_cancel_delete())

    await state.set_state(DeleteSource.source)

@router.message(DeleteSource.source)
async def delete_source(message: Message, state: FSMContext):
    global msg_sources_id
    chat_id = message.chat.id
    number = int(message.text)

    await message.delete()
    await bot.delete_message(chat_id=chat_id, message_id=msg_sources_id)

    msg_delete = await message.answer(text=f'üîÉ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Å –ø–æ—Ä—è–¥–∫–æ–≤—ã–º –Ω–æ–º–µ—Ä–æ–º ‚Äî {number} ...')
    await disk.init_client()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    res = await disk.delete_source(FILE_SOURCE, number)

    if res:
        msg_load = await message.answer(text='üîÉ –ó–∞–≥—Ä—É–∂–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...')
        await msg_delete.delete() if msg_load else None

        list_sources = await disk.get_sources(FILE_SOURCE)

        message_text = 'üóíÔ∏è –ò—Å—Ç–æ—á–Ω–∏–∫–∏:\n\n'
        for i, source in enumerate(list_sources):
            message_text += f'{i+1}. <a href="{source[1]}">{source[0]}</a>\n'
        message_text += '\nüóëÔ∏è –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–∞ üëá'

        msg_sources = await message.answer(text=message_text, reply_markup=await kb_sources(), parse_mode=ParseMode.HTML)
        msg_sources_id = msg_sources.message_id
        await msg_load.delete() if msg_sources else None


    await state.clear()

@router.callback_query(F.data == 'add_source')
async def add_source(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    global msg_add_title_id
    user_id = callback.from_user.id

    if user_id == ADMIN_ID:
        await callback.message.delete()

        msg_add_title = await callback.message.answer(text='üî§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞:')
        msg_add_title_id = msg_add_title.message_id
        await state.set_state(AddSource.source_title)

@router.message(AddSource.source_title)
async def add_source_title(message: Message, state: FSMContext):
    global msg_add_title_id, msg_add_link_id

    chat_id = message.chat.id
    await state.update_data(title=message.text)

    await message.delete()
    await bot.delete_message(chat_id=chat_id, message_id=msg_add_title_id)

    msg_add_link = await message.answer(text='üî§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫ (RSS):')
    msg_add_link_id = msg_add_link.message_id

    await state.set_state(AddSource.source_link)

@router.message(AddSource.source_link)
async def add_source_link(message: Message, state: FSMContext):
    global msg_add_link_id

    chat_id = message.chat.id
    await state.update_data(link=message.text)

    data = await state.get_data()

    await message.delete()
    await bot.delete_message(chat_id=chat_id, message_id=msg_add_link_id)

    await message.answer(
        text=f'üî§ –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫?\n\n{data["title"]} - {data["link"]}', 
        reply_markup=await kb_add_source())
    

@router.callback_query(F.data == 'add_source_yes')
async def add_source_yes(callback: CallbackQuery, state: FSMContext):
    global msg_sources_id

    user_id = callback.from_user.id
    data = await state.get_data()

    if user_id == ADMIN_ID:
        await callback.message.delete()

        msg_add_source = await callback.message.answer(text='üîÉ –î–æ–±–∞–≤–ª—è—é –Ω–æ–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...')

        await disk.init_client()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        res = await disk.add_source(FILE_SOURCE, data['title'], data['link'])

        if res:
            msg_load = await callback.message.answer(text='üîÉ –ó–∞–≥—Ä—É–∂–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...')
            await msg_add_source.delete() if msg_load else None

            list_sources = await disk.get_sources(FILE_SOURCE)

            message_text = 'üóíÔ∏è –ò—Å—Ç–æ—á–Ω–∏–∫–∏:\n\n'
            for i, source in enumerate(list_sources):
                message_text += f'{i+1}. <a href="{source[1]}">{source[0]}</a>\n'
            message_text += '\nüóëÔ∏è –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–∞ üëá'

            msg_sources = await callback.message.answer(text=message_text, reply_markup=await kb_sources(), parse_mode=ParseMode.HTML)
            msg_sources_id = msg_sources.message_id
            await msg_load.delete() if msg_sources else None


    await state.clear()


@router.callback_query(F.data == 'list_ban_categories')
async def list_ban_categories(callback: CallbackQuery):
    user_id = callback.from_user.id

    if user_id == ADMIN_ID:
        msg_load = await callback.message.answer(text='üîÉ –ó–∞–≥—Ä—É–∂–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...')
        await callback.message.delete() if msg_load else None

        await disk.init_client()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        categories = await disk.get_ban_categories(FILE_BAN_CATEGORIES)

        categories_str = ', '.join([f'{category}' for category in categories]) if categories else ''

        msg_list_categories = await callback.message.answer(
            text=f'–°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π:\n\n{categories_str}', 
            reply_markup=await kb_list_categories())
        
        await msg_load.delete() if msg_list_categories else None

@router.callback_query(F.data == 'add_ban_category')
async def add_ban_category(callback: CallbackQuery, state: FSMContext):
    global msg_add_categories_id
    user_id = callback.from_user.id

    if user_id == ADMIN_ID:
        text_msg = f'{callback.message.text}\n\nüî§ –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø–µ—Ä–µ—á–∏—Å–ª—è—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é: üëá'

        msg_add_categories = await callback.message.edit_text(
            text=text_msg,
            reply_markup=await kb_add_ban_categories())
        msg_add_categories_id = msg_add_categories.message_id
        await state.set_state(AddBanCategories.list_ban_categories)

@router.message(AddBanCategories.list_ban_categories)
async def list_categories(message: Message, state: FSMContext):
    global msg_add_categories_id

    chat_id = message.chat.id
    await state.update_data(categories=message.text)

    await message.delete()
    await bot.delete_message(chat_id=chat_id, message_id=msg_add_categories_id)

    await message.answer(text=f'üî§ –î–æ–±–∞–≤–∏—Ç—å?\n\n{message.text}', reply_markup=await kb_add_categories())

@router.callback_query(F.data == 'add_ban_categories')
async def add_ban_categories(callback: CallbackQuery, state: FSMContext):
    global msg_add_categories_id
    user_id = callback.from_user.id

    data = await state.get_data()

    if user_id == ADMIN_ID:
        await callback.message.delete()
        msg_categoreis = await callback.message.answer(text='üîÉ –û–±–Ω–æ–≤–ª—è—é —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...')

        categories_list = data['categories'].split(', ')

        await disk.init_client()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        res = await disk.add_new_categories(FILE_BAN_CATEGORIES, categories_list)

        if res:
            msg_load = await callback.message.answer(text='üîÉ –ó–∞–≥—Ä—É–∂–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...')
            await msg_categoreis.delete() if msg_load else None

            await disk.init_client()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–∞
            categories = await disk.get_ban_categories(FILE_BAN_CATEGORIES)

            categories_str = ', '.join([f'{category}' for category in categories]) if categories else ''

            msg_list_categories = await callback.message.answer(
                text=f'–°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π:\n\n{categories_str}', 
                reply_markup=await kb_list_categories())
            
            await msg_load.delete() if msg_list_categories else None


    await state.clear()
    